#!/bin/bash

# üé® Dotfiles Installer
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ dotfiles

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Arch Linux
check_arch() {
    if ! grep -q "Arch Linux" /etc/os-release 2>/dev/null; then
        print_warning "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Arch Linux"
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    local packages=(
        "hyprland"
        "kitty"
        "fish"
        "waybar"
        "wofi"
        "swaync"
        "hyprpaper"
        "hyprlock"
        "fastfetch"
        "polkit-gnome"
        "pulseaudio-alsa"
        "networkmanager"
        "python"
        "python-pip"
        "go"
        "ttf-font-awesome"
        "otf-font-awesome"
        "ttf-jetbrains-mono"
        "pkgfile"
        "ttf-dejavu"
        "powerline-fonts"
        "nwg-look"
        "papirus-icon-theme"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø–∞–∫–µ—Ç—ã —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    local missing_packages=()
    for package in "${packages[@]}"; do
        if ! pacman -Q "$package" &>/dev/null; then
            missing_packages+=("$package")
        fi
    done
    
    if [ ${#missing_packages[@]} -gt 0 ]; then
        print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤: ${missing_packages[*]}"
        sudo pacman -S --needed "${missing_packages[@]}"
    else
        print_success "–í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º yay –¥–ª—è AUR –ø–∞–∫–µ—Ç–æ–≤
    if ! command -v yay &> /dev/null; then
        print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ yay –¥–ª—è AUR –ø–∞–∫–µ—Ç–æ–≤..."
        sudo pacman -S --needed git base-devel
        git clone https://aur.archlinux.org/yay.git /tmp/yay
        cd /tmp/yay
        makepkg -si --noconfirm
        cd - > /dev/null
        rm -rf /tmp/yay
        print_success "yay —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    else
        print_success "yay —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ AUR –ø–∞–∫–µ—Ç–æ–≤
    local aur_packages=("pokeget" "hyprpicker" "otf-codenewroman-nerd" "pywal")
    for package in "${aur_packages[@]}"; do
        if ! yay -Q "$package" &>/dev/null; then
            print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ AUR –ø–∞–∫–µ—Ç–∞: $package"
            yay -S --noconfirm "$package"
        else
            print_success "AUR –ø–∞–∫–µ—Ç $package —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        fi
    done
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
create_backups() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤..."
    
    local configs=(
        "~/.config/hypr"
        "~/.config/kitty"
        "~/.config/waybar"
        "~/.config/wofi"
        "~/.config/swaync"
        "~/.config/fish"
        "~/.config/fastfetch"
    )
    
    local backup_dir="$HOME/.config_backup_$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$backup_dir"
    
    for config in "${configs[@]}"; do
        local expanded_config=$(eval echo "$config")
        if [ -d "$expanded_config" ]; then
            print_info "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $expanded_config"
            cp -r "$expanded_config" "$backup_dir/"
        fi
    done
    
    print_success "–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: $backup_dir"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
create_symlinks() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫..."
    
    local current_dir=$(pwd)
    local configs=(
        "hypr:~/.config/hypr"
        "kitty:~/.config/kitty"
        "waybar:~/.config/waybar"
        "wofi:~/.config/wofi"
        "swaync:~/.config/swaync"
        "fish:~/.config/fish"
        "fastfetch:~/.config/fastfetch"
    )
    
    for config in "${configs[@]}"; do
        IFS=':' read -r source target <<< "$config"
        local expanded_target=$(eval echo "$target")
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏/—Ñ–∞–π–ª—ã
        if [ -e "$expanded_target" ]; then
            rm -rf "$expanded_target"
        fi
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É
        ln -sf "$current_dir/$source" "$expanded_target"
        print_success "–°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞: $source -> $expanded_target"
    done
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤
set_permissions() {
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤..."
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
    find . -name "*.sh" -type f -exec chmod +x {} \;
    find . -name "*.py" -type f -exec chmod +x {} \;
    
    print_success "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Fish –∫–∞–∫ –æ–±–æ–ª–æ—á–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
setup_fish() {
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Fish shell..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ Fish –æ–±–æ–ª–æ—á–∫–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if [ "$SHELL" != "/usr/bin/fish" ]; then
        print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Fish –∫–∞–∫ –æ–±–æ–ª–æ—á–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é..."
        chsh -s /usr/bin/fish
        print_success "Fish —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –æ–±–æ–ª–æ—á–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        print_warning "–ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"
    else
        print_success "Fish —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±–æ–ª–æ—á–∫–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    fi
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Go
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Go..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Go
    if command -v go &> /dev/null; then
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è Go –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        mkdir -p ~/go/{bin,src,pkg}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ fish config –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        local fish_config="$HOME/.config/fish/config.fish"
        if [ -f "$fish_config" ]; then
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Go
            if ! grep -q "GOPATH\|GOROOT\|GOPROXY" "$fish_config"; then
                echo "" >> "$fish_config"
                echo "# Go environment variables" >> "$fish_config"
                echo "set --export GOPATH \$HOME/go" >> "$fish_config"
                echo "set --export GOROOT /usr/lib/go" >> "$fish_config"
                echo "set --export GOPROXY https://proxy.golang.org,direct" >> "$fish_config"
                echo "set --export PATH \$GOPATH/bin \$PATH" >> "$fish_config"
                print_success "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Go –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ fish config"
            else
                print_success "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Go —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
            fi
        fi
    else
        print_warning "Go –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –¥–ª—è Hyprland
setup_autostart() {
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞..."
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    mkdir -p ~/.config/hypr
    
    print_success "–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤
setup_fonts() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
    local fonts=(
        "JetBrains Mono"
        "Font Awesome"
        "DejaVu"
        "Powerline"
    )
    
    for font in "${fonts[@]}"; do
        if fc-list | grep -q "$font"; then
            print_success "–®—Ä–∏—Ñ—Ç $font —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        else
            print_warning "–®—Ä–∏—Ñ—Ç $font –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
    done
    
    print_success "–ü—Ä–æ–≤–µ—Ä–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pywal (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
setup_pywal() {
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ pywal –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤..."
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if [ ! -f ~/.cache/wal/colors.json ]; then
        print_info "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã..."
        mkdir -p ~/.cache/wal
        echo '{"colors": {"color0": "#1a1a1a", "color7": "#ffffff", "color8": "#333333", "color9": "#ff6b6b"}, "special": {"background": "#1a1a1a", "foreground": "#ffffff"}}' > ~/.cache/wal/colors.json
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤
    if [ -f ~/.config/hypr/set_wal_colors.py ]; then
        python3 ~/.config/hypr/set_wal_colors.py
    fi
    
    print_success "Pywal –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —Å–±–æ—Ä–∫–∞ chpaper
setup_chpaper() {
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —Å–±–æ—Ä–∫–∞ chpaper..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Go
    if ! command -v go &> /dev/null; then
        print_error "Go –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É chpaper"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ chpaper –≤ /usr/local/bin
    if [ -f /usr/local/bin/chpaper ]; then
        print_info "chpaper —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ /usr/local/bin"
        local current_version=$(/usr/local/bin/chpaper --version 2>/dev/null || echo "unknown")
        print_success "–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è chpaper: $current_version"
        return 0
    fi
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–±–æ—Ä–∫–∏
    local temp_dir="/tmp/chpaper_build_$(date +%s)"
    mkdir -p "$temp_dir"
    cd "$temp_dir"
    
    print_info "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è chpaper..."
    if git clone https://github.com/vyantik/chpaper.git .; then
        print_success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω"
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
        cd - > /dev/null
        rm -rf "$temp_dir"
        return 1
    fi
    
    print_info "–°–±–æ—Ä–∫–∞ chpaper..."
    if go build -o chpaper ./cmd; then
        print_success "chpaper —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω"
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ chpaper"
        cd - > /dev/null
        rm -rf "$temp_dir"
        return 1
    fi
    
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ chpaper –≤ /usr/local/bin..."
    if sudo cp chpaper /usr/local/bin/; then
        sudo chmod +x /usr/local/bin/chpaper
        print_success "chpaper —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ /usr/local/bin"
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ chpaper"
        cd - > /dev/null
        rm -rf "$temp_dir"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
    if command -v chpaper &> /dev/null; then
        local version=$(chpaper --version 2>/dev/null || echo "unknown")
        print_success "chpaper —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤–µ—Ä—Å–∏—è: $version)"
    else
        print_error "chpaper –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH"
    fi
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    cd - > /dev/null
    rm -rf "$temp_dir"
    
    print_success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ chpaper –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
final_check() {
    print_info "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏..."
    
    local configs=(
        "~/.config/hypr/hyprland.conf"
        "~/.config/kitty/kitty.conf"
        "~/.config/waybar/config.jsonc"
        "~/.config/wofi/config"
        "~/.config/fish/config.fish"
    )
    
    local all_good=true
    for config in "${configs[@]}"; do
        local expanded_config=$(eval echo "$config")
        if [ -f "$expanded_config" ]; then
            print_success "‚úì $config"
        else
            print_error "‚úó $config - –Ω–µ –Ω–∞–π–¥–µ–Ω"
            all_good=false
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º..."
    
    if command -v go &> /dev/null; then
        local go_version=$(go version | awk '{print $3}')
        print_success "‚úì Go: $go_version"
    else
        print_error "‚úó Go –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        all_good=false
    fi
    
    if command -v yay &> /dev/null; then
        local yay_version=$(yay --version | head -n1)
        print_success "‚úì yay: $yay_version"
    else
        print_error "‚úó yay –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        all_good=false
    fi
    
    if command -v fish &> /dev/null; then
        local fish_version=$(fish --version | awk '{print $3}')
        print_success "‚úì Fish: $fish_version"
    else
        print_error "‚úó Fish –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        all_good=false
    fi
    
    if command -v chpaper &> /dev/null; then
        local chpaper_version=$(chpaper --version 2>/dev/null || echo "unknown")
        print_success "‚úì chpaper: $chpaper_version"
    else
        print_error "‚úó chpaper –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        all_good=false
    fi
    
    if command -v hyprpicker &> /dev/null; then
        local hyprpicker_version=$(hyprpicker --version 2>/dev/null || echo "unknown")
        print_success "‚úì hyprpicker: $hyprpicker_version"
    else
        print_error "‚úó hyprpicker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        all_good=false
    fi
    
    if command -v wal &> /dev/null; then
        local pywal_version=$(wal --version 2>/dev/null || echo "unknown")
        print_success "‚úì pywal: $pywal_version"
    else
        print_error "‚úó pywal –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        all_good=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à—Ä–∏—Ñ—Ç–∞ otf-codenewroman-nerd
    if fc-list | grep -q "CodeNewRoman Nerd Font"; then
        print_success "‚úì otf-codenewroman-nerd: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_error "‚úó otf-codenewroman-nerd –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        all_good=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ Font Awesome
    if fc-list | grep -q "Font Awesome"; then
        print_success "‚úì Font Awesome: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_error "‚úó Font Awesome –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        all_good=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à—Ä–∏—Ñ—Ç–∞ JetBrains Mono
    if fc-list | grep -q "JetBrains Mono"; then
        print_success "‚úì JetBrains Mono: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_error "‚úó JetBrains Mono –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        all_good=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ pkgfile
    if command -v pkgfile &> /dev/null; then
        local pkgfile_version=$(pkgfile --version 2>/dev/null || echo "unknown")
        print_success "‚úì pkgfile: $pkgfile_version"
    else
        print_error "‚úó pkgfile –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        all_good=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à—Ä–∏—Ñ—Ç–∞ DejaVu
    if fc-list | grep -q "DejaVu"; then
        print_success "‚úì DejaVu: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_error "‚úó DejaVu –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        all_good=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Powerline —à—Ä–∏—Ñ—Ç–æ–≤
    if fc-list | grep -q "Powerline"; then
        print_success "‚úì Powerline fonts: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
        print_error "‚úó Powerline fonts –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        all_good=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ nwg-look
    if command -v nwg-look &> /dev/null; then
        local nwg_look_version=$(nwg-look --version 2>/dev/null || echo "unknown")
        print_success "‚úì nwg-look: $nwg_look_version"
    else
        print_error "‚úó nwg-look –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        all_good=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ papirus-icon-theme
    if [ -d "/usr/share/icons/Papirus" ] || [ -d "/usr/share/icons/Papirus-Dark" ] || [ -d "/usr/share/icons/Papirus-Light" ]; then
        print_success "‚úì papirus-icon-theme: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_error "‚úó papirus-icon-theme –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        all_good=false
    fi
    
    if [ "$all_good" = true ]; then
        print_success "–í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
    else
        print_error "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ –±—ã–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        exit 1
    fi
}

# –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
show_next_steps() {
    echo
    print_success "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    echo
    echo "–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "1. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Å—Å–∏—é"
    echo "2. –í–æ–π–¥–∏—Ç–µ –≤ Hyprland (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥–∏—Å–ø–ª–µ–π–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä)"
    echo "3. –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ Hyprland –∫–æ–º–∞–Ω–¥–æ–π: Hyprland"
    echo
    echo "–û—Å–Ω–æ–≤–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:"
    echo "- Super + Enter: –û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª"
    echo "- Super + R: –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"
    echo "- Super + Q: –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ"
    echo "- Super + 1-9: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤"
    echo
    echo "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–æ–µ–≤:"
    echo "1. –ü–æ–º–µ—Å—Ç–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ ~/.config/hypr/wallpaper/"
    echo "2. –û–±–Ω–æ–≤–∏—Ç–µ –ø—É—Ç—å –≤ ~/.config/hypr/hyprpaper.conf"
    echo "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Hyprland"
    echo
    echo "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:"
    echo "- Go: $(go version 2>/dev/null | awk '{print $3}' || echo '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')"
    echo "- yay: $(yay --version 2>/dev/null | head -n1 || echo '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')"
    echo "- Fish: $(fish --version 2>/dev/null | awk '{print $3}' || echo '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')"
    echo "- chpaper: $(chpaper --version 2>/dev/null || echo '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')"
    echo "- hyprpicker: $(hyprpicker --version 2>/dev/null || echo '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')"
    echo "- pywal: $(wal --version 2>/dev/null || echo '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')"
    echo "- otf-codenewroman-nerd: $(fc-list | grep -q 'CodeNewRoman Nerd Font' && echo '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' || echo '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')"
    echo "- Font Awesome: $(fc-list | grep -q 'Font Awesome' && echo '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' || echo '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')"
    echo "- JetBrains Mono: $(fc-list | grep -q 'JetBrains Mono' && echo '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' || echo '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')"
    echo "- pkgfile: $(pkgfile --version 2>/dev/null || echo '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')"
    echo "- DejaVu: $(fc-list | grep -q 'DejaVu' && echo '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' || echo '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')"
    echo "- Powerline fonts: $(fc-list | grep -q 'Powerline' && echo '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã' || echo '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')"
    echo "- nwg-look: $(nwg-look --version 2>/dev/null || echo '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')"
    echo "- papirus-icon-theme: $([ -d '/usr/share/icons/Papirus' ] || [ -d '/usr/share/icons/Papirus-Dark' ] || [ -d '/usr/share/icons/Papirus-Light' ] && echo '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' || echo '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')"
    echo
    echo "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Go:"
    echo "- GOPATH: ~/go"
    echo "- GOROOT: /usr/lib/go"
    echo "- GOPROXY: https://proxy.golang.org,direct"
    echo
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ chpaper:"
    echo "- chpaper --path /path/to/image.png"
    echo "- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PNG, JPEG/JPG, WebP"
    echo "- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤—ã—Ö —Å—Ö–µ–º —á–µ—Ä–µ–∑ pywal"
    echo
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ hyprpicker:"
    echo "- hyprpicker -r: –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ —Å —ç–∫—Ä–∞–Ω–∞"
    echo "- hyprpicker -a: –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ –±—É—Ñ–µ—Ä"
    echo "- hyprpicker -f hex: –≤—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ hex"
    echo
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ pywal:"
    echo "- wal -i /path/to/image.png: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    echo "- wal -l: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã"
    echo "- wal -s: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"
    echo
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ pkgfile:"
    echo "- pkgfile -u: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"
    echo "- pkgfile <–∫–æ–º–∞–Ω–¥–∞>: –ø–æ–∏—Å–∫ –ø–∞–∫–µ—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –∫–æ–º–∞–Ω–¥—É"
    echo "- pkgfile -b <—Ñ–∞–π–ª>: –ø–æ–∏—Å–∫ –ø–∞–∫–µ—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ —Ñ–∞–π–ª"
    echo
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ nwg-look:"
    echo "- nwg-look: –∑–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GTK —Ç–µ–º"
    echo "- nwg-look -a: –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
    echo "- nwg-look -t <—Ç–µ–º–∞>: –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã"
    echo
    print_info "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://wiki.hyprland.org/"
    print_info "Go –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://golang.org/doc/"
    print_info "chpaper —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/vyantik/chpaper"
    print_info "hyprpicker –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://github.com/hyprwm/hyprpicker"
    print_info "pywal –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://github.com/dylanaraps/pywal"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üé® –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ Dotfiles"
    echo "======================"
    echo
    
    check_arch
    install_dependencies
    create_backups
    create_symlinks
    set_permissions
    setup_fonts
    setup_pywal
    setup_autostart
    setup_fish
    setup_chpaper    
    final_check
    show_next_steps
}

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@" 
